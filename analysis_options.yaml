# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at https://dart.dev/tools/linter#lints.
  #
  # Instead of disabling a lint rule for the entire project in the
  # sections below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the warning.
  rules:
    # Performance and optimization rules
    - prefer_const_constructors
    - prefer_const_constructors_in_immutables
    - prefer_const_declarations
    - prefer_const_literals_to_create_immutables
    - prefer_final_fields
    - prefer_final_in_for_each
    - prefer_final_locals
    - avoid_unnecessary_containers
    - avoid_function_literals_in_foreach_calls
    - prefer_collection_literals
    - prefer_spread_collections
    - prefer_if_null_operators
    - prefer_null_aware_operators
    - unnecessary_null_checks
    - unnecessary_nullable_for_final_variable_declarations
    
    # Memory and resource management
    - close_sinks
    - cancel_subscriptions
    - avoid_print
    - avoid_web_libraries_in_flutter
    
    # Code quality
    - use_key_in_widget_constructors
    - avoid_returning_null_for_void
    - prefer_single_quotes
    - require_trailing_commas
    - sort_child_properties_last
    - use_build_context_synchronously
    
    # Disable some rules that may conflict with existing code
    # - avoid_print  # We use our own logger

analyzer:
  exclude:
    - "**/*.g.dart"
    - "**/*.freezed.dart"
    - "**/generated_plugin_registrant.dart"
    - "build/**"
    - "linux/**"
    - "windows/**"
    - "test/**"
  
  # Strong mode settings for better performance
  strong-mode:
    implicit-casts: false
    implicit-dynamic: false

  errors:
    # Treat certain warnings as errors for production builds
    invalid_assignment: error
    invalid_return_type_for_catch_error: error
    todo: ignore
    deprecated_member_use: ignore
    deprecated_member_use_from_same_package: ignore

dart_code_metrics:
  rules:
    # Performance optimizations
    - prefer-conditional-expressions
    - prefer-extracting-callbacks
    - prefer-single-widget-per-file
    - avoid-unnecessary-setstate
    - avoid-wrapping-in-padding
    - prefer-const-border-radius
    - prefer-extracting-callbacks

# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options
